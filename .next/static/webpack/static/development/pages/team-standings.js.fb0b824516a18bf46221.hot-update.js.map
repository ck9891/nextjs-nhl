{"version":3,"file":"static/webpack/static/development/pages/team-standings.js.fb0b824516a18bf46221.hot-update.js","sources":["webpack:///./pages/team-standings.js"],"sourcesContent":["import Layout from '../components/MyLayout.js'\nimport Link from 'next/link'\nimport fetch from 'isomorphic-unfetch'\nimport TeamList from '../components/TeamList.js';\nimport {useFetch} from '../components/hooks'\nimport {useState} from 'react'\n\n// const getStats = (id) => {\n//   [teamData, isLoading] = useFetch(`https://statsapi.web.nhl.com/api/v1/teams/${id}`)\n//   if (!isLoading) {\n//     return teamData\n//   } else {\n//     return null\n//   }\n// }\n\nconst TeamStandings = (props) => {\n  const [data, loading] = useFetch(`https://statsapi.web.nhl.com/api/v1/teams/`)\n  const [state, setstate] = useState({})\n  const teams = data.teams\n  let standings = [];\n  if (!loading) {\n\n    teams.forEach(team => {\n      // const [currentTeam, nextTeam] = useFetch(`https://statsapi.web.nhl.com/api/v1/teams/${team.id}`)\n      // if (!nextTeam) {\n      //   console.log(currentTeam)\n      // }\n      // let standingsData = getStats(team.id)\n      // console.log(standingsData)\n      console.log(team)\n       standings.push( {\n        id: team.id,\n        name: team.name,\n      })\n    });\n  }\n  console.log(standings)\n  return (\n  // <Layout>\n      <h1>NHL Team Standings</h1>\n      /* <TeamList teams={props.teams} />\n      if (!loading) {\n      <ul>\n        {data.map((team) => (\n          <li key={team.id}>\n            <Link as={`/p/${team.id}`} href={`/post?id=${team.id}`}>\n              <a>{team.name}</a>\n            </Link>\n          </li>\n        ))}\n      </ul>\n      }\n    </Layout> */\n    )\n  }\n\nTeamStandings.getInitialProps = async function (context) {\n  const { id } = context.query\n  const res = await fetch(`https://statsapi.web.nhl.com/api/v1/teams/${id}`)\n  const team = await res.json()\n  const resTeam = await fetch(`https://statsapi.web.nhl.com/api/v1/teams/${id}/roster`);\n  const roster = await resTeam.json();\n  const resStats = await fetch(`https://statsapi.web.nhl.com/api/v1/teams/${id}/stats`);\n  const teamStats = await resStats.json();\n  const teamRoster = roster.roster;\n  const nhlTeam = team.teams;\n  const singleSeason = teamStats.stats[0].splits;\n  console.log(nhlTeam);\n  return { nhlTeam, teamRoster, singleSeason }\n}\nexport default TeamStandings\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AACA;AAEA;AACA;;;;;;;;;;;;;;AAHA;AAiBA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAEA;AAFA;AAAA;AACA;AADA;AAGA;AAHA;AAAA;AACA;AADA;AAIA;AAJA;AAAA;AACA;AADA;AAKA;AALA;AAAA;AACA;AADA;AAMA;AANA;AAAA;AACA;AADA;AAOA;AACA;AACA;AACA;AACA;AAXA;AAYA;AAAA;AAAA;AAAA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAaA;;;;A","sourceRoot":""}